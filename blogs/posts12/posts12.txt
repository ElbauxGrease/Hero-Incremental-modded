<a class="date" href="/blogs/posts12/posts12.html">1/1/2020</a><br>
<div>
Today's project was another HTML5 canvas. This time, the canvas was an image and I implemented some different image filters. The first was to pixelate the image. This was achieved by partitioning the image into squares and taking the average RGB value within that square. Then, I set the entire square to the RGB value, achieving a pixelated effect. Second, and what is probably more impressive, was an edge detecting filter. It draws edges around an image by taking what amounts to the derivative across each pixel to find where the gradient is large. If the gradient is larger than the threshold, it paints the pixel blue, while painting the other pixels black. Finally, I created a gaussian blur filter. This filter uses the gaussian to create a 5x5 matrix of values which it applies to a center pixel and the 24 pixels around it. Dividing by the sum of values gives a sort of average and blurs pixels into each other. This was the most computationally expensive task, since it has to perform 25 operations on each pixel. Programs like Photoshop may multithread and use RAM more effectively than an in browser application. Pixelating took a few seconds, while gaussian blurs may take a minute or two. You can mess around with the slider and apply different filters <a href="filters/filters.html">here</a>
</div>